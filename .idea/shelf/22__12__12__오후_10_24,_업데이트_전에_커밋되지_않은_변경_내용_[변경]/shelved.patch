Index: views/user/tourlandRegisterForm.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/stylesheets/tourlandRegisterForm.css\"/>\r\n<script src=\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n\r\n<%- include(\"../include/userHeader.ejs\")%>\r\n\r\n<script>\r\n\r\nvar userno = \"<%=userVO.userno %>\";\r\n\r\nvar didUcheckId = false;\r\nvar validId = true;\r\nvar useraddr ='';\r\n\r\n$(function(){\r\n\r\n\t$(\"#regForm input\").change(function(){\r\n\t\t$(\".errorMsg\").css(\"display\", \"none\");\r\n\t})\r\n\r\n\t$(\"form\").submit(function(e){\r\n\t\t$(this).attr(\"onsubmit\",\"\");\r\n\t\t$(\".errorMsg\").css(\"display\", \"none\");\r\n\t\tvar username = $(\"input[name='username']\").val();\r\n\t\tvar userbirth = $(\"input[name='userbirth']\").val();\r\n\t\tvar usertel = $(\"input[name='usertel']\").val();\r\n\t\tvar useraddr = $(\"input[name='useraddr']\").val();\r\n\t\tvar userauth = $(\"input[name='userauth']\").val();\r\n\t\tvar userid = $(\"input[name='userid']\").val();\r\n\t\tvar userpass = $(\"input[name='userpass']\").val();\r\n\t\tvar userpass2 = $(\"input[name='userpass2']\").val();\r\n\t\tvar forCheckId = $(\"#forCheckId\").val();\r\n\r\n\t\tvar postcode = $(\"input#sample6_postcode\").val();\r\n\t\tvar address = $(\"input#sample6_address\").val();\r\n\t\tvar detailAddress= $(\"input#sample6_detailAddress\").val();\r\n\t\tvar extraAddress = $(\"input#sample6_extraAddress\").val();\r\n\r\n\t\tuseraddr=\"(\"+postcode+\")\"+address+\" \"+detailAddress+\" \"+extraAddress;\r\n\t\t//alert(useraddr);\r\n\t\t$(\"input[name='useraddr']\").val(useraddr);\r\n\r\n\t\t//이름 정규표현식\r\n\t\tvar nameReg = /^[가-힣]{2,5}$/; //네임은 2-5 한글\r\n\t\tif (nameReg.test(username) == false) {\r\n\t\t\t$(\"input[name='username']\").next().next().css(\"display\", \"inline\");\r\n\t\t\t  return false;\r\n\t\t  }\r\n\t\t//생년월일정규표현식\r\n\t\tvar birthReg = /^(1|2)[0-9]{3}-(01|02|03|04|05|06|07|08|09|10|11|12)-(01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)$/;\r\n\t\tif (birthReg.test(userbirth) == false) {\r\n\t\t\t$(\"input[name='userbirth']\").next().next().css(\"display\", \"inline\");\r\n\t\t\t  return false;\r\n\t\t  }\r\n\t\t//전화번호 정규 표현식\r\n\t\tvar phoneReg = /^(010|011|019|018|017)-[0-9]{3,4}-[0-9]{4}$/;\r\n\t\tif (phoneReg.test(usertel) == false) {\r\n\t\t\t$(\"input[name='usertel']\").next().next().css(\"display\", \"inline\");\r\n\t\t\t  return false;\r\n\t\t  }\r\n\r\n\r\n\t\t//사원 아이디 정규 표현식, 회원 아이디 규칙과 동일\r\n\t\tvar idReg = /^[a-z0-9]{5,12}$/i; //영어, 숫자 5-15\r\n\t\tif (idReg.test(userid) == false) {\r\n\t\t\t$(\"input[name='userid']\").next().next().css(\"display\", \"inline\");\r\n\t\t\t  return false;\r\n\t\t  }\r\n\r\n\t\t//사원 비밀번호 정규 표현식, 회원 비밀번호 규칙과 동일함\r\n\t\tvar pwdReg = /^[a-zA-Z0-9!@#%^&*]{4,15}/;\r\n\t\t if(pwdReg.test(userpass) == false){\r\n\t\t\t $(\"input[name='userpass']\").next().css(\"display\",\"inline\");\r\n\t\t\t return false;\r\n\t\t }else if(userpass != userpass2){\r\n\t\t\t $(\"input[name='userpass']\").next().next().css(\"display\",\"inline\");\r\n\t\t\t return false;\r\n\t\t }\r\n\r\n\t\t if(forCheckId ==\"exist\"){\r\n\t\t\t return false;\r\n\t\t }\r\n\r\n\t\t if(didUcheckId == false){\r\n\t\t\t alert(\"아이디 중복 체크 해주세요\");\r\n\t\t\t return false;\r\n\t\t }\r\n\r\n\t\t if(validId == false){\r\n\t\t\t return false;\r\n\t\t }\r\n\r\n\t\t alert(\"가입 축하 쿠폰이 발급 되었습니다. 마이페이지에서 확인하세요!\");\r\n\r\n\t})\r\n\r\n\t$(\"#userpassword\").change(function(){\r\n\t\t$(\".errorMsg\").css(\"display\", \"none\");\r\n\t\t //사원 비밀번호 정규 표현식, 회원 비밀번호 규칙과 동일함\r\n\t\tvar pwdReg = /^[a-zA-Z0-9!@#%^&*]{4,15}/;\r\n\t\t if(pwdReg.test($(this).val()) == false){\r\n\t\t\t $(\"input[name='userpass']\").next().css(\"display\",\"inline\");\r\n\t\t }\r\n\t})\r\n\r\n\t$(\"#userpassword2\").change(function(){\r\n\t\t$(\".errorMsg\").css(\"display\", \"none\");\r\n\t\tvar userpass = $(\"input[name='userpass']\").val();\r\n\t\tif(userpass != $(this).val()){\r\n\t\t\t $(\"input[name='userpass2']\").next().next().next().css(\"display\",\"inline\");\r\n\t\t}\r\n\t})\r\n\r\n\t$(\"#userId\").change(function(){\r\n\t\t$(\".errorMsg\").css(\"display\", \"none\");\r\n\t\tvar idReg = /^[a-z0-9]{5,12}$/i; //영어, 숫자 5-15\r\n\t\tif (idReg.test($(this).val()) == false) {\r\n\t\t\t$(\"input[name='userid']\").next().next().css(\"display\", \"inline\");\r\n\t\t\t  return false;\r\n\t\t  }\r\n\t})\r\n\r\n\t$(\"#btnCheck\").click(function(){\r\n\t\t$(\".errorMsg\").css(\"display\", \"none\");\r\n\t\tvar empid = $(\"input[name='userid']\").val();\r\n\t\t //아이디 중복 ajax로 처리하기\r\n\t\t $.ajax({\r\n\t\t\turl:\"idCheck/\"+empid,  //이 커맨드에서 유저아이디와 사원 아이디를 모두 확인하기에\r\n\t\t\ttype:\"get\",\r\n\t\t\tdataType:\"text\",\r\n\t\t\tsuccess:function(res){\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tdidUcheckId = true;\r\n\t\t\t\tif(res==\"exist\"){\r\n\t\t\t\t\t$(\"input[name='userid']\").next().next().next().css(\"display\", \"inline\");\r\n\t\t\t\t\tvalidId = false;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t$(\"input[name='userid']\").next().next().next().next().css(\"display\", \"inline\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t})\r\n\r\n\r\n\t//아이디 입력값이 달라질 때 마다 아이디 체크 여부를 초기화\r\n\t$(\"#userId\").change(function(){\r\n\t\tdidUcheckId = false;\r\n\t\tvalidId = true;\r\n\t})\r\n\r\n\t$(\"#btnRegisterCancel\").click(function(){\r\n\t\tlocation.href=\"/customer/tourlandMain\";\r\n\t})\r\n})\r\n\r\n\t//주소\r\nfunction sample6_execDaumPostcode() {\r\n\t\tnew daum.Postcode({\r\n\t\t\toncomplete: function(data) {\r\n\t\t\t\t// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n\r\n\t\t\t\t// 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n\t\t\t\t// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n\t\t\t\tvar addr = ''; // 주소 변수\r\n\t\t\t\tvar extraAddr = ''; // 참고항목 변수\r\n\r\n\r\n\t\t\t\t//사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n\t\t\t\tif (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n\t\t\t\t\taddr = data.roadAddress;\r\n\t\t\t\t} else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n\t\t\t\t\taddr = data.jibunAddress;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\r\n\t\t\t\tif(data.userSelectedType === 'R'){\r\n\t\t\t\t\t// 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n\t\t\t\t\t// 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n\t\t\t\t\tif(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n\t\t\t\t\t\textraAddr += data.bname;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 건물명이 있고, 공동주택일 경우 추가한다.\r\n\t\t\t\t\tif(data.buildingName !== '' && data.apartment === 'Y'){\r\n\t\t\t\t\t\textraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n\t\t\t\t\tif(extraAddr !== ''){\r\n\t\t\t\t\t\textraAddr = ' (' + extraAddr + ')';\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* // 조합된 참고항목을 해당 필드에 넣는다.\r\n\t\t\t\t\tdocument.getElementById(\"sample6_extraAddress\").value = extraAddr; */\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdocument.getElementById(\"sample6_extraAddress\").value = '';\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n\t\t\t\tdocument.getElementById('sample6_postcode').value = data.zonecode;\r\n\t\t\t\tdocument.getElementById(\"sample6_address\").value = addr;\r\n\t\t\t\t// 커서를 상세주소 필드로 이동한다.\r\n\t\t\t\tdocument.getElementById(\"sample6_detailAddress\").focus();\r\n\r\n\t\t\t}\r\n\t\t}).open();\r\n\t}\r\n\r\n</script>\r\n<section style=\"height:1000px;\">\r\n\t<div id=\"editProfile\">\r\n\t<h1>투어랜드 회원가입</h1>\r\n\t<span id=\"info\">투어랜드는 고객님의 개인정보가 외부로 노출되지 않도록 항상 노력하고 있습니다.</span>\r\n\t\t<form action=\"tourlandRegister\" method=\"post\" id=\"regForm\">\r\n\t\t\t<p>\r\n\t\t\t\t<input type=\"hidden\" value=\"<%=autoNo%>\" name=\"userno\">\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>고객 아이디</label>\r\n\t\t\t\t<input type=\"text\" name=\"userid\" required=\"required\"  placeholder=\" 영문,숫자 포함 5-12자리\" id=\"userId\">\r\n\t\t\t\t<button id=\"btnCheck\" type=\"button\">중복확인</button>\r\n\t\t\t\t<span class=\"errorMsg\">영문, 숫자 포함 5-12자리를 넣어주세요</span>\r\n\t\t\t\t<span class=\"errorMsg\">중복되는 아이디 입니다. 다른 아이디를 입력해주세요.</span>\r\n\t\t\t\t<span class=\"errorMsg\">사용 가능한 아이디입니다.</span>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>비밀번호</label>\r\n\t\t\t\t<input type=\"password\" name=\"userpass\" placeholder=\" 영문, 숫자 포함 5-12자리\" required=\"required\" id=\"userpassword\" >\r\n\t\t\t\t<span class=\"errorMsg\">영문, 숫자 포함 5-12자리를 넣어주세요</span>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>비밀번호 확인</label>\r\n\t\t\t\t<input type=\"password\" name=\"userpass2\" required=\"required\" id=\"userpassword2\" ><br>\r\n\t\t\t\t<span class=\"errorMsg\">영문, 숫자 포함 5-12자리를 넣어주세요</span>\r\n\t\t\t\t<span class=\"errorMsg\">비밀번호가 일치하지 않습니다.</span>\r\n\t\t\t\t<br>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>고객 이름</label>\r\n\t\t\t\t<input type=\"text\" name=\"username\" required=\"required\" placeholder=\" 한글 2-5자리\" required=\"required\" ><br>\r\n\t\t\t\t<span class=\"errorMsg\">이름을 한글 2자리에서 5자리로 입력해주세요.</span>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>생년월일</label>\r\n\t\t\t\t<input type=\"text\" name=\"userbirth\" required=\"required\"  placeholder=\" 2000-02-02\" required=\"required\"  ><br>\r\n\t\t\t\t<span class=\"errorMsg\">생년월일 형식에 맞게 넣어주세요. 예시: 2000-02-02</span>\r\n\t\t\t</p>\r\n\t\t\t<p style=\"margin-bottom:10px; height: 170px;\" id=\"pAddr\">\r\n\t\t\t\t<label>주소</label><br>\r\n\t\t\t\t<input type=\"hidden\" name=\"useraddr\" class=\"inputAddr\"><br>\r\n\t\t\t\t<input type=\"text\" id=\"sample6_postcode\" placeholder=\"우편번호\" class=\"inputAddr\">\r\n\t\t\t\t<input type=\"button\" onclick=\"sample6_execDaumPostcode()\" value=\"우편번호 찾기\" style=\"background:steelblue; border:inherit; color:white;\" class=\"inputAddr\">\r\n\t\t\t\t<input type=\"text\" id=\"sample6_address\" placeholder=\"주소\" class=\"inputAddr\"><br>\r\n\t\t\t\t<input type=\"text\" id=\"sample6_detailAddress\" placeholder=\"상세주소\" class=\"inputAddr\">\r\n\t\t\t\t<!-- <input type=\"text\" id=\"sample6_extraAddress\" placeholder=\"참고항목\" class=\"inputAddr\"> -->\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>전화번호</label>\r\n\t\t\t\t<input type=\"text\" name=\"usertel\" required=\"required\"  placeholder=\" 예) 010-4334-4321\" required=\"required\" ><br>\r\n\t\t\t\t<span class=\"errorMsg\">형식에 맞게 넣어주세요 예시: 010-4334-4321</span>\r\n\t\t\t</p>\r\n\t\t\t<!-- <p>\r\n\t\t\t\t<label><span class=\"red\">* </span>여권번호</label>\r\n\t\t\t\t<input type=\"text\" name=\"passport\" value=\"M70689098\">\r\n\t\t\t</p> -->\r\n\t\t\t<!-- <p id=\"btns\">\r\n\t\t\t\t<button  style=\"cursor:pointer\">아이디/비밀번호 변경</button>\r\n\t\t\t\t<button id=\"withdraw\"  style=\"cursor:pointer\">투어랜드 탈퇴</button>\r\n\t\t\t</p> -->\r\n\r\n\t\t\t<p id=\"inputs\">\r\n\t\t\t\t<input type=\"submit\" id=\"submit\" value=\"가입하기\"  style=\"cursor:pointer\">\r\n\t\t\t\t<input type=\"button\" id=\"btnRegisterCancel\" value=\"취소\"  style=\"cursor:pointer\">\r\n\t\t\t</p>\r\n\t\t</form>\r\n\t</div>\r\n</section>\r\n<%- include(\"../include/userFooter.ejs\")%>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/user/tourlandRegisterForm.ejs b/views/user/tourlandRegisterForm.ejs
--- a/views/user/tourlandRegisterForm.ejs	(revision 2b5388eaef55378c9bd086c94fc47c63a63c87bb)
+++ b/views/user/tourlandRegisterForm.ejs	(date 1670819336636)
@@ -279,4 +279,5 @@
 		</form>
 	</div>
 </section>
+
 <%- include("../include/userFooter.ejs")%>
\ No newline at end of file
Index: routes/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>var express = require('express');\nvar router = express.Router();\nconst sequelize = require(\"sequelize\");\nconst Op = sequelize.Op;\n\nconst cookieParser = require(\"cookie-parser\");\nconst models = require(\"../models\");\nconst fs = require('fs');\n// import {getPagingData, getPagination} from '@controller/pagination';\nconst {getPagingData, getPagination} = require('../controller/pagination');\n\nrequire('dotenv').config({ path: '.env' });\n\n/* GET home page. */\nrouter.get('/', async function (req, res, next) {\n    try {\n        const airplane = await models.airplane.findAll({});\n        console.log(\"1111->\", airplane);\n        res.send(airplane);\n\n    } catch (err) {\n        console.error(err);\n        next(err);\n    }\n    res.render('index', {title: 'Express'});\n});\n\n\nrouter.get('/api/airplane/:id', async function (req, res, next) {\n    try {\n        let searchAirplane = req.params.id;\n        console.log(\"222->\", searchAirplane);\n        const airplane = await models.airplane.findOne({\n            where: {\n                id: searchAirplane\n            }\n        });\n        console.log(\"1111->\", airplane);\n        res.send(airplane);\n\n    } catch (err) {\n        console.error(err);\n        next(err);\n    }\n    res.render('index', {title: 'Express'});\n});\n\n\nrouter.get('/displayFile/:whichOne', async  (req, res, next) => {\n    const choice = req.params.whichOne;\n    const query = req.query.filename;\n    const base_dir = \"/home/work/IdeaProjects/tourland/public/displayFile\";\n\n    let path;\n    if( choice === \"popup\"){\n        path = base_dir + \"/popup\" + query;\n    }\n    if ( choice === \"banner\"){\n        path = base_dir + \"/banner\" + query;\n    }\n    if ( choice === \"event\"){\n        path = base_dir + \"/event\" + query;\n    }\n    if ( choice === \"product\" || (choice === \"productSmall\")){\n        path = base_dir + \"/product\" + query;\n    }\n    if ( choice === \"practice\"){\n        path = base_dir + \"/practice\" + query;\n    }\n    fs.createReadStream(path).pipe(res);\n});\n\n\nrouter.get('/customer', async (req, res, next) => {\n\n    const currentProductPrice = {};\n    const currentProductPrice2 = {};\n    const currentProduct ={};\n    const currentProduct2 ={};\n\n    const popup1 = await models.popup.findOne({\n        raw: true,\n        where : {\n            position : \"R\"\n        }\n    });\n\n    console.log(\"pppp ->\", popup1);\n    const startDate = new Date(popup1.enddate) - new Date(popup1.startdate);\n    const endDate = Math.abs(startDate/(24*60*60*1000));\n\n    console.log(\"startdate->\", startDate);\n    console.log(\"enddate->\", endDate);\n\n    const cookieConfig = {\n        expires: new Date(Date.now() + endDate*24*60*60),\n        path: '/',\n        signed: true\n    };\n    res.cookie(\"popup1\", popup1.pic, cookieConfig)\n\n    const popup2 = await models.popup.findOne({\n        raw: true,\n        where : {\n            position : \"L\"\n        }\n    });\n\n    const startDate2 = new Date(popup2.enddate) - new Date(popup2.startdate);\n    const endDate2 = Math.abs(startDate2/(24*60*60*1000));\n\n    const cookieConfig2 = {\n        expires: new Date(Date.now() + endDate2*24*60*60),\n        path : '/',\n        signed: true,\n    };\n    res.cookie(\"popup2\", popup2.pic, cookieConfig2)\n\n\n    const banner1 = await models.banner.findOne({\n        raw: true,\n        where : {\n            position : \"L\"\n        }\n    });\n    const banner2 = await models.banner.findOne({\n        raw: true,\n        where : {\n            position : \"R\"\n        }\n    });\n    const Auth = {};\n    const login = {};\n    const Manager = {};\n    const searchkeyword = {};\n\n\n    res.render('tourlandMain', {\n        currentProductPrice,\n        currentProductPrice2,\n        currentProduct,\n        currentProduct2,\n        popup1:popup1,\n        popup2,\n        banner1,\n        banner2,\n        Auth,\n        login,\n        Manager,\n        searchkeyword\n    });\n\n});\n\n\nrouter.get('/customer/tourlandRegister', function (req, res, next) {\n\n    let autoNo = \"\";\n    let Auth ={};\n    let login = \"\";\n    let Manager = {};\n    let searchkeyword = {};\n\n    let userVO = {};\n\n\n\n\n    res.render(\"user/tourlandRegisterForm\",  {autoNo, Auth,login, Manager, searchkeyword,userVO});\n});\n\n/* GET home page. */\nrouter.get('/customer1', async function (req, res, next) {\n    const cookieConfig = {\n        //cookieConfig는 키, 밸류 외에 설정을 보낼 수 있다.\n        maxAge: 30000,\n        //밀리초 단위로 들어가는데 30000을 설정하면 30초만료 쿠키를 생성한다.\n        path: '/',\n        httpOnly: true,\n        //통신할때만 접속할 수 있다. 기본값은 false임\n        signed: true,\n        //쿠키를 암호화 시킨다.\n    };\n\n    const popup1 =await models.popup.findAll({\n        raw: true,\n        where : {\n            position : \"R\"\n        }\n    });\n    console.log(\"2222->\",popup1);\n\n    const popup2 =(await models.popup.findAll({\n        raw: true,\n        attributes: [\"pic\"],\n        where : {\n            position : \"L\"\n        }\n    })).map((e)=>{\n        return `${e.pic}`;\n        // console.log(\"4444=>\", `${e.pic}`);\n    });\n\n    console.log(\"3333->\",popup2);\n\n\n    res.cookie(\"popup1\", popup2)\n    // try{\n    //   const airplane = await models.airplane.findAll({});\n    //   console.log(\"1111->\", airplane);\n    //   res.send(airplane);\n    //\n    // } catch (err) {\n    //   console.error(err);\n    //   next(err);\n    // }\n    res.render('tourlandMain', {\n        title: 'Tour Land Shopping Site',\n        Auth: {},\n        login: \"login\",\n        Manager: {},\n        popup1: popup1,\n        popup2: popup2,\n        currentProduct: {},\n        currentProduct2: {},\n        banner1: {},\n\n        banner2: {},\n        currentProductPrice: {},\n        currentProductPrice2: {},\n    });\n});\n\n\nrouter.get('/manager/userlist', (req,res,next)=>{\n\n    let cri = {};\n    let btnName = \"\";\n    let list ={};\n\n    res.render(\"userMngList\",{cri, btnName, list});\n})\n\nrouter.get('/manager/statistics', (req,res,next)=>{\n\n    let Manager = {};\n    let Auth = {};\n\n    res.render(\"manager/main/statistics\",{Manager, Auth});\n})\n\nrouter.get('/manager/userMngList/:usersecess', async (req,res,next)=>{\n    //usersecess 정상회원, 탈퇴회원 구분\n\n    const usersecess = req.params.usersecess;\n    let { searchType, keyword } = req.query;\n\n    const contentSize = Number(process.env.CONTENTSIZE); // 한페이지에 나올 개수\n    const currentPage = Number(req.query.currentPage) || 1; //현재페이\n    const { limit, offset } = getPagination(currentPage, contentSize);\n\n    keyword = keyword ? keyword : \"\";\n\n    let dataAll = await models.user.findAll({\n        where: {\n            [Op.and] : [\n                {\n                    usersecess: usersecess\n                }\n            ],\n            [Op.or]: [\n                {\n                    userid: { [Op.like]: \"%\" +keyword+ \"%\" }\n                },\n                {\n                    username: { [Op.like]: \"%\" + keyword + \"%\" }\n                }\n            ]\n\n        },\n        limit, offset\n    })\n\n    let dataCountAll = await models.user.findAndCountAll({\n        where: {\n            [Op.and] : [\n                {\n                    usersecess: usersecess\n                }\n            ],\n            [Op.or]: [\n                {\n                    userid: { [Op.like]: \"%\" +keyword+ \"%\" }\n                },\n                {\n                    username: { [Op.like]: \"%\" + keyword + \"%\" }\n                }\n            ]\n        },\n        limit, offset\n    })\n\n    const pagingData = getPagingData(dataCountAll, currentPage, limit);\n\n    let cri = {searchType,keyword};\n\n    let btnName = (Boolean(Number(usersecess)) ? \"회원 리스트\" : \"탈퇴회원 조회\");\n\n    console.log(\"usersecbtt->\", btnName)\n    let Manager = {};\n    let Auth ={};\n    let list = dataAll;\n\n    res.render(\"manager/user/userMngList\",{cri, list, btnName, pagingData, Manager, usersecess, Auth});\n})\n\n\n\nrouter.get('/manager/userDetailForm/:usersecess', async (req,res,next)=> {\n    //usersecess 정상회원, 탈퇴회원 구분\n    const usersecess = req.params.usersecess;\n    let { no, currentPage, searchType, keyword } = req.query;\n\n    let userVO = await models.user.findOne({\n        raw : true,\n\n        where : {userno : no}\n    })\n    console.log(\"userid->\", userVO);\n\n    let cri = {};\n    let Manager = {};\n    let Auth = {};\n    let couponLists =[{}];\n\n    res.render(\"manager/user/userDetailForm\", {userVO, cri, Manager, Auth, usersecess,couponLists});\n});\n\n\nrouter.get('/loginForm', async (req,res,next)=> {\n\n    let registerSuccess = {};\n    let UserStay = {};\n    let EmpStay = {};\n    let error = \"에러 발생\";\n    let Auth ={};\n    let login =\"\";\n    let Manager = {};\n    let searchkeyword = \"\";\n\n\n    res.render(\"user/tourlandLoginForm\", {Auth,login, Manager,searchkeyword, registerSuccess, UserStay, EmpStay, error});\n});\n\n\n\nrouter.post('/loginForm', async (req,res,next)=> {\n    let { id, pass} = req.body;\n    console.log(\"loginForm->\", id, pass)\n\n    let registerSuccess = {};\n    let UserStay = {};\n    let EmpStay = {};\n    let error = \"에러 발생\";\n    let Auth ={};\n    let login =\"\";\n    let Manager = {};\n    let searchkeyword = \"\";\n\n\n    res.render(\"user/tourlandLoginForm\", {Auth,login, Manager,searchkeyword, registerSuccess, UserStay, EmpStay, error});\n});\n\n\nmodule.exports = router;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/index.js b/routes/index.js
--- a/routes/index.js	(revision 2b5388eaef55378c9bd086c94fc47c63a63c87bb)
+++ b/routes/index.js	(date 1670819425688)
@@ -134,7 +134,6 @@
     const Manager = {};
     const searchkeyword = {};
 
-
     res.render('tourlandMain', {
         currentProductPrice,
         currentProductPrice2,
